{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "PMD",
          "version": "6.40.0",
          "informationUri": "https://pmd.github.io/pmd/",
          "rules": [
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'sb' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "CloseResource: Ensure that resources like this FileReader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "DataflowAnomalyAnalysis",
              "shortDescription": {
                "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'fr' (lines '86'-'102')."
              },
              "fullDescription": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis",
              "help": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 5,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CommentRequired",
              "shortDescription": {
                "text": "CommentRequired: Public method and constructor comments are required"
              },
              "fullDescription": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_documentation.html#commentrequired",
              "help": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like br"
              },
              "fullDescription": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "DataflowAnomalyAnalysis",
              "shortDescription": {
                "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'command' (lines '57'-'64')."
              },
              "fullDescription": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis",
              "help": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 5,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "LawOfDemeter",
              "shortDescription": {
                "text": "LawOfDemeter: Potential violation of Law of Demeter (object not created locally)"
              },
              "fullDescription": {
                "text": "\nThe Law of Demeter is a simple rule, that says \"only talk to friends\". It helps to reduce coupling between classes\nor objects.\n\nSee also the references:\n\n*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;\n*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;\n*   <http://www.ccs.neu.edu/home/lieber/LoD.html>\n*   <http://en.wikipedia.org/wiki/Law_of_Demeter>\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_design.html#lawofdemeter",
              "help": {
                "text": "\nThe Law of Demeter is a simple rule, that says \"only talk to friends\". It helps to reduce coupling between classes\nor objects.\n\nSee also the references:\n\n*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;\n*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;\n*   <http://www.ccs.neu.edu/home/lieber/LoD.html>\n*   <http://en.wikipedia.org/wiki/Law_of_Demeter>\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "AvoidReassigningParameters",
              "shortDescription": {
                "text": "AvoidReassigningParameters: Avoid reassigning parameters such as 'pathname'"
              },
              "fullDescription": {
                "text": "\nReassigning values to incoming parameters of a method or constructor is not recommended, as this can\nmake the code more difficult to understand. The code is often read with the assumption that parameter values\ndon't change and an assignment violates therefore the principle of least astonishment. This is especially a\nproblem if the parameter is documented e.g. in the method's javadoc and the new content differs from the original\ndocumented content.\n\nUse temporary local variables instead. This allows you to assign a new name, which makes the code better\nunderstandable.\n\nNote that this rule considers both methods and constructors. If there are multiple assignments for a formal\nparameter, then only the first assignment is reported.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_bestpractices.html#avoidreassigningparameters",
              "help": {
                "text": "\nReassigning values to incoming parameters of a method or constructor is not recommended, as this can\nmake the code more difficult to understand. The code is often read with the assumption that parameter values\ndon't change and an assignment violates therefore the principle of least astonishment. This is especially a\nproblem if the parameter is documented e.g. in the method's javadoc and the new content differs from the original\ndocumented content.\n\nUse temporary local variables instead. This allows you to assign a new name, which makes the code better\nunderstandable.\n\nNote that this rule considers both methods and constructors. If there are multiple assignments for a formal\nparameter, then only the first assignment is reported.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 2,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'st' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like st"
              },
              "fullDescription": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "PositionLiteralsFirstInComparisons",
              "shortDescription": {
                "text": "PositionLiteralsFirstInComparisons: Position literals first in String comparisons"
              },
              "fullDescription": {
                "text": "\nPosition literals first in comparisons, if the second argument is null then NullPointerExceptions\ncan be avoided, they will just return false.\n\nThis rule is replaced by the more general rule {% rule \"LiteralsFirstInComparisons\" %}.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_bestpractices.html#positionliteralsfirstincomparisons",
              "help": {
                "text": "\nPosition literals first in comparisons, if the second argument is null then NullPointerExceptions\ncan be avoided, they will just return false.\n\nThis rule is replaced by the more general rule {% rule \"LiteralsFirstInComparisons\" %}.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'osw' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidLiteralsInIfCondition",
              "shortDescription": {
                "text": "AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements"
              },
              "fullDescription": {
                "text": "\nAvoid using hard-coded literals in conditional statements. By declaring them as static variables\nor private members with descriptive names maintainability is enhanced. By default, the literals \"-1\" and \"0\" are ignored.\nMore exceptions can be defined with the property \"ignoreMagicNumbers\".\n\nThe rule doesn't consider deeper expressions by default, but this can be enabled via the property `ignoreExpressions`.\nWith this property set to false, if-conditions like `i == 1 + 5` are reported as well. Note that in that case,\nthe property ignoreMagicNumbers is not taken into account, if there are multiple literals involved in such an expression.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition",
              "help": {
                "text": "\nAvoid using hard-coded literals in conditional statements. By declaring them as static variables\nor private members with descriptive names maintainability is enhanced. By default, the literals \"-1\" and \"0\" are ignored.\nMore exceptions can be defined with the property \"ignoreMagicNumbers\".\n\nThe rule doesn't consider deeper expressions by default, but this can be enabled via the property `ignoreExpressions`.\nWith this property set to false, if-conditions like `i == 1 + 5` are reported as well. Note that in that case,\nthe property ignoreMagicNumbers is not taken into account, if there are multiple literals involved in such an expression.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like c"
              },
              "fullDescription": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LiteralsFirstInComparisons",
              "shortDescription": {
                "text": "LiteralsFirstInComparisons: Position literals first in String comparisons"
              },
              "fullDescription": {
                "text": "\n            Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions\n            can be avoided, they will just return false. Note that switching literal positions for compareTo and\n            compareToIgnoreCase may change the result, see examples.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_bestpractices.html#literalsfirstincomparisons",
              "help": {
                "text": "\n            Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions\n            can be avoided, they will just return false. Note that switching literal positions for compareTo and\n            compareToIgnoreCase may change the result, see examples.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CommentSize",
              "shortDescription": {
                "text": "CommentSize: Comment is too large: Too many lines"
              },
              "fullDescription": {
                "text": "\nDetermines whether the dimensions of non-header comments found are within the specified limits.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_documentation.html#commentsize",
              "help": {
                "text": "\nDetermines whether the dimensions of non-header comments found are within the specified limits.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "UnusedAssignment",
              "shortDescription": {
                "text": "UnusedAssignment: The initializer for variable 'fr' is never used (overwritten on line 102)"
              },
              "fullDescription": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_bestpractices.html#unusedassignment",
              "help": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "IfStmtsMustUseBraces",
              "shortDescription": {
                "text": "IfStmtsMustUseBraces: Avoid using if statements without curly braces"
              },
              "fullDescription": {
                "text": "\nAvoid using if statements without using braces to surround the code block. If the code\nformatting or indentation is lost then it becomes difficult to separate the code being\ncontrolled from the rest.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_apex_codestyle.html#ifstmtsmustusebraces",
              "help": {
                "text": "\nAvoid using if statements without using braces to surround the code block. If the code\nformatting or indentation is lost then it becomes difficult to separate the code being\ncontrolled from the rest.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 's' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'osw' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "CloseResource: Ensure that resources like this InputStreamReader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnusedAssignment",
              "shortDescription": {
                "text": "UnusedAssignment: The initializer for variable 'pathname' is never used (overwritten on line 65)"
              },
              "fullDescription": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_bestpractices.html#unusedassignment",
              "help": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'sws' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like sb"
              },
              "fullDescription": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'request' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "DataflowAnomalyAnalysis",
              "shortDescription": {
                "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'c' (lines '87'-'103')."
              },
              "fullDescription": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis",
              "help": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 5,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "PrematureDeclaration",
              "shortDescription": {
                "text": "PrematureDeclaration: Avoid declaring a variable if it is unreferenced before a possible exit point."
              },
              "fullDescription": {
                "text": "\nChecks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#prematuredeclaration",
              "help": {
                "text": "\nChecks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like s"
              },
              "fullDescription": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "DataflowAnomalyAnalysis",
              "shortDescription": {
                "text": "DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'c' (lines '103'-'121')."
              },
              "fullDescription": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis",
              "help": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 5,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 's' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedAssignment",
              "shortDescription": {
                "text": "UnusedAssignment: The initializer for variable 'c' is never used (overwritten on line 103)"
              },
              "fullDescription": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_bestpractices.html#unusedassignment",
              "help": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedAssignment",
              "shortDescription": {
                "text": "UnusedAssignment: The initializer for variable 'command' is never used (overwritten on line 64)"
              },
              "fullDescription": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_bestpractices.html#unusedassignment",
              "help": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'argv' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidFileStream",
              "shortDescription": {
                "text": "AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter"
              },
              "fullDescription": {
                "text": "\nThe FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage\ncollection pauses.\nSee [JDK-8080225](https://bugs.openjdk.java.net/browse/JDK-8080225) for details.\n\nThe FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream,\nagain causing garbage collection issues while finalizer methods are called.\n\n* Use `Files.newInputStream(Paths.get(fileName))` instead of `new FileInputStream(fileName)`.\n* Use `Files.newOutputStream(Paths.get(fileName))` instead of `new FileOutputStream(fileName)`.\n* Use `Files.newBufferedReader(Paths.get(fileName))` instead of `new FileReader(fileName)`.\n* Use `Files.newBufferedWriter(Paths.get(fileName))` instead of `new FileWriter(fileName)`.\n\nPlease note, that the `java.nio` API does not throw a `FileNotFoundException` anymore, instead\nit throws a `NoSuchFileException`. If your code dealt explicitly with a `FileNotFoundException`,\nthen this needs to be adjusted. Both exceptions are subclasses of `IOException`, so catching\nthat one covers both.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_performance.html#avoidfilestream",
              "help": {
                "text": "\nThe FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage\ncollection pauses.\nSee [JDK-8080225](https://bugs.openjdk.java.net/browse/JDK-8080225) for details.\n\nThe FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream,\nagain causing garbage collection issues while finalizer methods are called.\n\n* Use `Files.newInputStream(Paths.get(fileName))` instead of `new FileInputStream(fileName)`.\n* Use `Files.newOutputStream(Paths.get(fileName))` instead of `new FileOutputStream(fileName)`.\n* Use `Files.newBufferedReader(Paths.get(fileName))` instead of `new FileReader(fileName)`.\n* Use `Files.newBufferedWriter(Paths.get(fileName))` instead of `new FileWriter(fileName)`.\n\nPlease note, that the `java.nio` API does not throw a `FileNotFoundException` anymore, instead\nit throws a `NoSuchFileException`. If your code dealt explicitly with a `FileNotFoundException`,\nthen this needs to be adjusted. Both exceptions are subclasses of `IOException`, so catching\nthat one covers both.\n        "
              },
              "properties": {
                "ruleset": "Performance",
                "priority": 1,
                "tags": [
                  "Performance"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "CloseResource: Ensure that resources like this OutputStreamWriter object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "DataflowAnomalyAnalysis",
              "shortDescription": {
                "text": "DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'sb' (lines '88'-'121')."
              },
              "fullDescription": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis",
              "help": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 5,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AvoidCatchingGenericException",
              "shortDescription": {
                "text": "AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block"
              },
              "fullDescription": {
                "text": "\nAvoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_design.html#avoidcatchinggenericexception",
              "help": {
                "text": "\nAvoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "SignatureDeclareThrowsException",
              "shortDescription": {
                "text": "SignatureDeclareThrowsException: A method/constructor should not explicitly throw java.lang.Exception"
              },
              "fullDescription": {
                "text": "\nA method/constructor shouldn't explicitly throw the generic java.lang.Exception, since it\nis unclear which exceptions that can be thrown from the methods. It might be\ndifficult to document and understand such vague interfaces. Use either a class\nderived from RuntimeException or a checked exception.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_design.html#signaturedeclarethrowsexception",
              "help": {
                "text": "\nA method/constructor shouldn't explicitly throw the generic java.lang.Exception, since it\nis unclear which exceptions that can be thrown from the methods. It might be\ndifficult to document and understand such vague interfaces. Use either a class\nderived from RuntimeException or a checked exception.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "DataflowAnomalyAnalysis",
              "shortDescription": {
                "text": "DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'pathname' (lines '65'-'82')."
              },
              "fullDescription": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis",
              "help": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 5,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "DataflowAnomalyAnalysis",
              "shortDescription": {
                "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'pathname' (lines '58'-'65')."
              },
              "fullDescription": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis",
              "help": {
                "text": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.\nFrom those informations there can be found various problems.\n\n1. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.\n2. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.\n\nThis rule is deprecated. Use {% rule \"java/bestpractices/UnusedAssignment\" %} in category bestpractices instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 5,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "NoPackage",
              "shortDescription": {
                "text": "NoPackage: All classes, interfaces, enums and annotations must belong to a named package"
              },
              "fullDescription": {
                "text": "\nDetects when a class, interface, enum or annotation does not have a package definition.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#nopackage",
              "help": {
                "text": "\nDetects when a class, interface, enum or annotation does not have a package definition.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like fr"
              },
              "fullDescription": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'br' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "CloseResource: Ensure that resources like this Socket object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AssignmentToNonFinalStatic",
              "shortDescription": {
                "text": "AssignmentToNonFinalStatic: Possible unsafe assignment to a non-final static field in a constructor."
              },
              "fullDescription": {
                "text": "\nIdentifies a possible unsafe usage of a static field.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_errorprone.html#assignmenttononfinalstatic",
              "help": {
                "text": "\nIdentifies a possible unsafe usage of a static field.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CommentRequired",
              "shortDescription": {
                "text": "CommentRequired: Field comments are required"
              },
              "fullDescription": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_documentation.html#commentrequired",
              "help": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "ControlStatementBraces",
              "shortDescription": {
                "text": "ControlStatementBraces: This statement should have braces"
              },
              "fullDescription": {
                "text": "\n            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n        "
              },
              "helpUri": "https://pmd.github.io/pmd-6.40.0/pmd_rules_java_codestyle.html#controlstatementbraces",
              "help": {
                "text": "\n            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 0,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'sb' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 88,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 88,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 1,
          "message": {
            "text": "CloseResource: Ensure that resources like this FileReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 86,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 86,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataflowAnomalyAnalysis",
          "ruleIndex": 2,
          "message": {
            "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'fr' (lines '86'-'102')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 102,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 102,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 3,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 0,
                  "endLine": 29,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 0,
                  "endLine": 29,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 0,
                  "endLine": 39,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 0,
                  "endLine": 39,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 82,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 82,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 0,
                  "endLine": 121,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 0,
                  "endLine": 121,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 0,
                  "endLine": 130,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 0,
                  "endLine": 130,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 4,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like br"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataflowAnomalyAnalysis",
          "ruleIndex": 5,
          "message": {
            "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'command' (lines '57'-'64')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 0,
                  "endLine": 64,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 0,
                  "endLine": 64,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LawOfDemeter",
          "ruleIndex": 6,
          "message": {
            "text": "LawOfDemeter: Potential violation of Law of Demeter (object not created locally)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidReassigningParameters",
          "ruleIndex": 7,
          "message": {
            "text": "AvoidReassigningParameters: Avoid reassigning parameters such as 'pathname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 8,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'st' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 62,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 62,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 9,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like st"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 61,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 61,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "PositionLiteralsFirstInComparisons",
          "ruleIndex": 10,
          "message": {
            "text": "PositionLiteralsFirstInComparisons: Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 11,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'osw' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 0,
                  "endLine": 84,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 0,
                  "endLine": 84,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidLiteralsInIfCondition",
          "ruleIndex": 12,
          "message": {
            "text": "AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 92,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 92,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 13,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like c"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 0,
                  "endLine": 87,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 0,
                  "endLine": 87,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 14,
          "message": {
            "text": "LiteralsFirstInComparisons: Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentSize",
          "ruleIndex": 15,
          "message": {
            "text": "CommentSize: Comment is too large: Too many lines"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 0,
                  "endLine": 11,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 0,
                  "endLine": 11,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedAssignment",
          "ruleIndex": 16,
          "message": {
            "text": "UnusedAssignment: The initializer for variable 'fr' is never used (overwritten on line 102)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 86,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 86,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "IfStmtsMustUseBraces",
          "ruleIndex": 17,
          "message": {
            "text": "IfStmtsMustUseBraces: Avoid using if statements without curly braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 98,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 98,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 18,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 's' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 19,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'osw' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 0,
                  "endLine": 52,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 0,
                  "endLine": 52,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 20,
          "message": {
            "text": "CloseResource: Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedAssignment",
          "ruleIndex": 21,
          "message": {
            "text": "UnusedAssignment: The initializer for variable 'pathname' is never used (overwritten on line 65)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 0,
                  "endLine": 58,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 0,
                  "endLine": 58,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 22,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'sws' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 0,
                  "endLine": 128,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 0,
                  "endLine": 128,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 23,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like sb"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 88,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 88,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'request' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 0,
                  "endLine": 55,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 0,
                  "endLine": 55,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataflowAnomalyAnalysis",
          "ruleIndex": 25,
          "message": {
            "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'c' (lines '87'-'103')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 0,
                  "endLine": 103,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 0,
                  "endLine": 103,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "PrematureDeclaration",
          "ruleIndex": 26,
          "message": {
            "text": "PrematureDeclaration: Avoid declaring a variable if it is unreferenced before a possible exit point."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 88,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 88,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 27,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like s"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 44,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 44,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataflowAnomalyAnalysis",
          "ruleIndex": 28,
          "message": {
            "text": "DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'c' (lines '103'-'121')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 0,
                  "endLine": 121,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 0,
                  "endLine": 121,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 29,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 's' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 44,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 44,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedAssignment",
          "ruleIndex": 30,
          "message": {
            "text": "UnusedAssignment: The initializer for variable 'c' is never used (overwritten on line 103)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 0,
                  "endLine": 87,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 0,
                  "endLine": 87,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedAssignment",
          "ruleIndex": 31,
          "message": {
            "text": "UnusedAssignment: The initializer for variable 'command' is never used (overwritten on line 64)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 0,
                  "endLine": 57,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 0,
                  "endLine": 57,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 32,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'argv' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 0,
                  "endLine": 125,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 0,
                  "endLine": 125,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidFileStream",
          "ruleIndex": 33,
          "message": {
            "text": "AvoidFileStream: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 0,
                  "endLine": 102,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 0,
                  "endLine": 102,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 34,
          "message": {
            "text": "CloseResource: Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 0,
                  "endLine": 51,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 0,
                  "endLine": 51,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataflowAnomalyAnalysis",
          "ruleIndex": 35,
          "message": {
            "text": "DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'sb' (lines '88'-'121')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 121,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 0,
                  "endLine": 121,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingGenericException",
          "ruleIndex": 36,
          "message": {
            "text": "AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 0,
                  "endLine": 105,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 0,
                  "endLine": 105,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "SignatureDeclareThrowsException",
          "ruleIndex": 37,
          "message": {
            "text": "SignatureDeclareThrowsException: A method/constructor should not explicitly throw java.lang.Exception"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 0,
                  "endLine": 27,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 0,
                  "endLine": 27,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 0,
                  "endLine": 31,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 0,
                  "endLine": 31,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 44,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 0,
                  "endLine": 44,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 0,
                  "endLine": 85,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 0,
                  "endLine": 85,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 0,
                  "endLine": 125,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 0,
                  "endLine": 125,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataflowAnomalyAnalysis",
          "ruleIndex": 38,
          "message": {
            "text": "DataflowAnomalyAnalysis: Found 'DU'-anomaly for variable 'pathname' (lines '65'-'82')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 0,
                  "endLine": 82,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 0,
                  "endLine": 82,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataflowAnomalyAnalysis",
          "ruleIndex": 39,
          "message": {
            "text": "DataflowAnomalyAnalysis: Found 'DD'-anomaly for variable 'pathname' (lines '58'-'65')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 0,
                  "endLine": 65,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 0,
                  "endLine": 65,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "NoPackage",
          "ruleIndex": 40,
          "message": {
            "text": "NoPackage: All classes, interfaces, enums and annotations must belong to a named package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 0,
                  "endLine": 131,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 0,
                  "endLine": 131,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 41,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like fr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 86,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 0,
                  "endLine": 86,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 42,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'br' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 48,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 48,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 43,
          "message": {
            "text": "CloseResource: Ensure that resources like this Socket object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentToNonFinalStatic",
          "ruleIndex": 44,
          "message": {
            "text": "AssignmentToNonFinalStatic: Possible unsafe assignment to a non-final static field in a constructor."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 0,
                  "endLine": 28,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 0,
                  "endLine": 28,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 45,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 0,
                  "endLine": 21,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 0,
                  "endLine": 21,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 0,
                  "endLine": 25,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 0,
                  "endLine": 25,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 46,
          "message": {
            "text": "ControlStatementBraces: This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 0,
                  "endLine": 98,
                  "endColumn": 0
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SimpleWebServer.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 0,
                  "endLine": 98,
                  "endColumn": 0
                }
              }
            }
          ]
        }
      ],
      "invocations": [
        {
          "executionSuccessful": true,
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": []
        }
      ]
    }
  ]
}